%{
/*
 * selecção de instruções com postfix
 */
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include "node.h"
#include "postfix.h"
#include "y.tab.h"
#include "minor.h"

#ifndef U_
#define U_ "_"
#endif

#define TRACE
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost);

extern FILE *yyout;
static char *mklbl(int n) {
	static char buf[20];
	sprintf(buf, "%cL%d", n < 0 ? '.' : '_', n);
	return strcpy(malloc(strlen(buf)+1),buf);
}
static char *mkfunc(char *s) {
	static char buf[80];
	strcpy(buf, "_");
	strcat(buf, s);
	return buf;
}
%}
%term STMT=';' PRINT='!' ALLOC='#' INDEX='[' SCAN='?' CALL='(' PARAM=','
%term ADD='+' SUB='-' MUL='*' DIV='/' MOD='%' POW='^' 
%term EQ='=' GT='>' LT='<' AND='&' OR='|' NOT='~' 
%include "y.tab.h"
%%
file	: PROGRAM(decls, FUNCTION(END(ID, INT), FARGS(NIL, main)))	1 { }
file	: MODULE(decls)									1 {}

decls	: NIL 											1 {}
decls 	: gdecls										1 {}

gdecls 	: DECL(gdecls, decl) 							1 {}
gdecls	: DECL(NIL, decl)	 							1 {}

decl 	: VAR(vardecl) 									1 {}
decl 	: FUNCTION(END(ID, INT), FARGS(fvars, eqbody))	1 {}
decl 	: FUNCTION(END(ID, INT), FARGS(NIL, eqbody))	1 {}
decl	: NIL											

fvar 	: NUMBER(ID, NIL)								1 {}
fvar	: STRING(ID, NIL)								1 {}
fvar	: ARRAY(ID, INTS(INT, NIL))						1 {}

fvars 	: ARGS(NIL, fvar)								1 {}
fvars 	: ARGS(fvars, fvar)								1 {}

vardecl	: NUMBER(ID, eqint)								1 {}
vardecl	: STRING(ID, eqstr)								1 {}
vardecl	: ARRAY(ID, INTS(INT, eqvec))					1 {}

eqint 	: NIL											1 {}
eqint	: INT											1 { p->value.i;  }
%! eqint : INT											1 {}

eqstr	: NIL											1 {}
eqstr	: chars											1 {}

chars 	: CHARS(NIL, char)								1 {}		
chars	: CHARS(chars, char)							1 {}

char 	: INT											1 {}
char 	: CHAR											1 {}
char 	: STR											1 {}

eqvec	: NIL											1 {}
eqvec 	: ints											1 {}

ints 	: INT											1 {}
%! ints : INT											1 {}
ints 	: INTS(ints, INT)								1 {}
%! ints : INTS(ints, INT)								1 {}

eqbody 	: NIL											1 {}
eqbody 	: body											1 {}

main 	: START(fvars, minstrs)							1 {}
main 	: START(NIL, minstrs)							1 {}

body 	: START(fvars, STMT(instrs, ret))				1 {}
body 	: START(NIL, STMT(instrs, ret))					1 {}

ret 	: RETURN(NIL)									1 {}
ret 	: RETURN(expr)									1 {}
ret 	: NIL											1 {}

loop 	: ret											1 {}
loop 	: REPEAT										1 {}
loop 	: STOP											1 {}

block 	: STMT(instrs, loop)							1 {}

instrs 	: NIL											1 {}
instrs 	: STMT(instrs, instr)							1 {}

minstrs : NIL											1 { fprintf(yyout, pfTEXT pfALIGN pfGLOBL pfLABEL pfENTER, "_main", pfFUNC, "_main", 0); }
minstrs : STMT(minstrs, instr)							1 {}

instr 	: FI(THEN(IF(expr, block), elifs), else)		1 {}
instr 	: FOR(UNTIL(expr, expr), STEP(block, expr))		1 {}
instr 	: PRINT(expr)									1 {}
instr 	: expr											
instr 	: ALLOC(expr, lval)								1 {}

elifs 	: NIL											1 {}
elifs 	: ELIF(elifs, IF(expr, block))					1 {}

else	: NIL											1 {}
else 	: block											1 {}

lval 	: ID											1 {}
lval 	: INDEX(expr, ID)								1 {}

expr 	: chars											1 {}
expr	: lval											1 {}
expr	: SCAN											1 {}
expr	: ADDR(lval)									1 {}
expr	: expr											1 {}
expr	: ADD(expr, expr)								1 {}
expr	: SUB(expr, expr)								1 {}
expr	: MUL(expr, expr)								1 {}
expr	: DIV(expr, expr)								1 {}
expr	: MOD(expr, expr)								1 {}
expr	: POW(expr, expr)								1 {}
expr	: EQ(expr, expr)								1 {}
expr	: NE(expr, expr)								1 {}
expr	: GE(expr, expr)								1 {}
expr	: LE(expr, expr)								1 {}
expr	: LT(expr, expr)								1 {}
expr	: GT(expr, expr)								1 {}
expr	: AND(expr, expr)								1 {}
expr	: OR(expr, expr)								1 {}
expr	: NOT(expr)										1 {}
expr	: UMINUS(expr)									1 {}
expr	: DEF(expr, lval)								1 {}
expr	: CALL(ID, exprs)								1 {}

exprs 	: PARAM(expr, NIL)								1 {}
exprs	: PARAM(expr, exprs)							1 {}

%%
extern char **yynames;
extern int trace, errors, debugNode;
void evaluate(Node *p) {
	if (errors) return;
	/* if (trace) */ printNode(p, stdout, yynames);
	if (!yyselect(p) && trace) printf("selection successful\n");
}

#ifndef NOTRACE
static void yytrace(NODEPTR_TYPE p, int eruleno, int cost, int bestcost)
{
	int op = OP_LABEL(p);
	YYCONST char *tname = yytermname[op] ? yytermname[op] : "?";
	if (debugNode) fprintf(stderr, "0x%p:%s matched %s with cost %d vs. %d\n", p, tname, yystring[eruleno], cost, bestcost);
	if (cost >= MAX_COST && bestcost >= MAX_COST) {
		fprintf(stderr, "0x%p:%s NO MATCH %s with cost %d vs. %d\n", p, tname, yystring[eruleno], cost, bestcost);
		printNode(p, stderr, yynames);
	}
}
#endif
